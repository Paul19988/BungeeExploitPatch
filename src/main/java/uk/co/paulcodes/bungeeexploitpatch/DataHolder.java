package uk.co.paulcodes.bungeeexploitpatch;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

public class DataHolder {

    private List<String> ipAddresses = new ArrayList<String>();

    private BEP bep;

    public DataHolder(BEP bep) {
        this.bep = bep;

        populateMessages();

        if(bep.getConfig().isList("addresses")) {
            if(bep.getConfig().getStringList("addresses").isEmpty()) {
                // ADD DEFAULT IF EMPTY
                if(ipAddresses.isEmpty()) {
                    ipAddresses.add("127.0.0.1");
                }
                Bukkit.getLogger().log(Level.INFO, "Config empty, using defaults.");
            }else{
                Bukkit.getLogger().log(Level.INFO, "Loading IP Address(es)..");
                ipAddresses.clear();
                ipAddresses.addAll(bep.getConfig().getStringList("addresses"));
                Bukkit.getLogger().log(Level.INFO, "Loaded the following IP Address(es): " + bep.getConfig().getStringList("addresses").toString() + ".");
                Bukkit.getLogger().log(Level.INFO, "IP Address(es) successfully loaded.");
            }
        }else{
            // ADD DEFAULT IF EMPTY
            if(ipAddresses.isEmpty()) {
                ipAddresses.add("127.0.0.1");
            }
            bep.getConfig().set("addresses", ipAddresses);
            bep.saveConfig();
            Bukkit.getLogger().log(Level.INFO, "Generated default config.");
        }
    }

    public List<String> getAddresses() {
        return ipAddresses;
    }

    public boolean addEntry(String ip) {
        if(bep.getConfig().isList("addresses")) {
            ipAddresses.add(ip);
            bep.getConfig().set("addresses", ipAddresses);
            bep.saveConfig();
            Bukkit.getLogger().log(Level.INFO, "Added new IP to addresses: " + ip + ".");
            return true;
        }else{
            Bukkit.getLogger().log(Level.SEVERE, "Failed to add IP address!");
            return false;
        }
    }

    public boolean removeEntry(String ip) {
        if(bep.getConfig().isList("addresses")) {
            ipAddresses.remove(ip);
            bep.getConfig().set("addresses", ipAddresses);
            bep.saveConfig();
            Bukkit.getLogger().log(Level.INFO, "Removed IP from addresses: " + ip + ".");
            return true;
        }else{
            Bukkit.getLogger().log(Level.SEVERE, "Failed to remove IP address!");
            return false;
        }
    }

    public boolean clear() {
        if(bep.getConfig().isList("addresses")) {
            ipAddresses.clear();
            ipAddresses.add("127.0.0.1");

            bep.getConfig().set("addresses", ipAddresses);
            bep.saveConfig();

            Bukkit.getLogger().log(Level.INFO, "Cleared all IP's from addresses.");
            Bukkit.getLogger().log(Level.INFO, "Added new IP to addresses: 127.0.0.1.");
            return true;
        }else{
            Bukkit.getLogger().log(Level.SEVERE, "Failed to clear IP addresses!");
            return false;
        }
    }

    public String loadMessage(String messageType) {
        if(messageType.equalsIgnoreCase("no_permission")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&cYou do not have permission for this command. ({permission})";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("added_ip")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&aSuccessfully added {ip} to IP list.";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("deleted_ip")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&aSuccessfully removed {ip} from IP list.";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("list_ips")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&6Bungee Exploit Patch List: \n&a{ips}";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("clear_ips")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&eSuccessfully cleared all IP address(es).";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("prefix")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&c&lBEP &8&l> &a";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("kick_message")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&cPlease use the official proxy to join this server.";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }else if(messageType.equalsIgnoreCase("reload_message")) {
            if(bep.getConfig().isString(messageType)) {
                return bep.getConfig().getString(messageType);
            }else{
                String msg = "&eSuccessfully reloaded configurations.";
                bep.getConfig().set(messageType, msg);
                bep.saveConfig();
                return msg;
            }
        }
        return "MESSAGE MISSING";
    }

    public void populateMessages() {
        Variables.SET_NO_PERMISSION(ChatColor.translateAlternateColorCodes('&', loadMessage("no_permission")));
        Variables.SET_ADDED_IP(ChatColor.translateAlternateColorCodes('&', loadMessage("added_ip")));
        Variables.SET_DELETED_IP(ChatColor.translateAlternateColorCodes('&', loadMessage("deleted_ip")));
        Variables.SET_LIST_IPS(ChatColor.translateAlternateColorCodes('&', loadMessage("list_ips")));
        Variables.SET_CLEAR_IPS(ChatColor.translateAlternateColorCodes('&', loadMessage("clear_ips")));
        Variables.SET_PREFIX(ChatColor.translateAlternateColorCodes('&', loadMessage("prefix")));
        Variables.SET_KICK_MESSAGE(ChatColor.translateAlternateColorCodes('&', loadMessage("kick_message")));
        Variables.SET_RELOAD(ChatColor.translateAlternateColorCodes('&', loadMessage("reload_message")));
    }

    public boolean reload() {
        if(bep.getConfig().isList("addresses")) {
            Bukkit.getLogger().log(Level.INFO, "Reloading..");
            bep.reloadConfig();

            ipAddresses.clear();
            ipAddresses.addAll(bep.getConfig().getStringList("addresses"));

            Bukkit.getLogger().log(Level.INFO, "Loading IP Address(es)..");
            Bukkit.getLogger().log(Level.INFO, "Loaded the following IP Address(es): " + bep.getConfig().getStringList("addresses").toString() + ".");
            Bukkit.getLogger().log(Level.INFO, "IP Address(es) successfully loaded.");

            Bukkit.getLogger().log(Level.INFO, "Successfully reloaded.");
            return true;
        }else{
            Bukkit.getLogger().log(Level.SEVERE, "Failed to reload config!");
            return false;
        }
    }

}
